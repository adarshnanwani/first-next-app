{"ast":null,"code":"var _jsxFileName = \"/Users/adarshnanwani/Desktop/react work/next-work/first-next/pages/post.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport axios from \"axios\";\n\nconst Post = ({\n  id,\n  comments\n}) => {\n  console.log(id, comments);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, \"Comments for Post #\", id, \" \"), comments.map(comment => __jsx(Comment, _extends({}, comment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }))));\n};\n\nconst Comment = ({\n  email,\n  body\n}) => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, __jsx(\"h5\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, email), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, body));\n\nPost.getInitialProps = async ({\n  query\n}) => {\n  const res = await axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=\" + query.id);\n  const comments = res.data;\n  return _objectSpread({}, query, {\n    comments\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/adarshnanwani/Desktop/react work/next-work/first-next/pages/post.js"],"names":["axios","Post","id","comments","console","log","map","comment","Comment","email","body","getInitialProps","query","res","get","data"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAsB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ,EAAgBC,QAAhB;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBD,EAAxB,MADF,EAEGC,QAAQ,CAACG,GAAT,CAAaC,OAAO,IACnB,MAAC,OAAD,eAAaA,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CAFH,CADF;AAQD,CAVD;;AAYA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKD,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIC,IAAJ,CAFF,CADF;;AAOAT,IAAI,CAACU,eAAL,GAAuB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC1C,QAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAChB,0DAA0DF,KAAK,CAACV,EADhD,CAAlB;AAGA,QAAMC,QAAQ,GAAGU,GAAG,CAACE,IAArB;AACA,2BAAYH,KAAZ;AAAmBT,IAAAA;AAAnB;AACD,CAND;;AAOA,eAAeF,IAAf","sourcesContent":["import axios from \"axios\";\nconst Post = ({ id, comments }) => {\n  console.log(id, comments);\n  return (\n    <div>\n      <h1>Comments for Post #{id} </h1>\n      {comments.map(comment => (\n        <Comment {...comment} />\n      ))}\n    </div>\n  );\n};\n\nconst Comment = ({ email, body }) => (\n  <div>\n    <h5>{email}</h5>\n    <p>{body}</p>\n  </div>\n);\n\nPost.getInitialProps = async ({ query }) => {\n  const res = await axios.get(\n    \"https://jsonplaceholder.typicode.com/comments?postId=\" + query.id\n  );\n  const comments = res.data;\n  return { ...query, comments };\n};\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}